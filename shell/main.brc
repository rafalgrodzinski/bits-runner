@import io

rebootRaw raw<"~{eax}">
    mov ah, 0x00
    int 0x30
;

printMemStatsRaw raw<"~{eax}">
    mov ah, 0x08
    int 0x30
;

listRootRaw raw<"~{eax}">
    mov ah, 0x09
    int 0x30
;

isEqual fun: first data<u32, 16>, second data<u32, 16> -> bool
    i u32 <- 0
    rep i < 16 and first[i] = second[i] and first[i] != 0 and second[i] != 0
        i <- i + 1
    ;

    ret first[i] = second[i]
;

start fun
    buffer data<u32, 16>
    count u32 <- 0
    character u32 <- 0

    rep
        rep character != '\n'
            character <- @io.readPressedAscii()
            if character = '\b' and count > 0
                count <- count - 1
                @io.printChar(character, @io.ATTRIB_GRAY)
            ;
            if character != '\n' and character != '\b' and character != 0 and count < 15
                buffer[count] <- character
                count <- count + 1
                @io.printChar(character, @io.ATTRIB_GRAY)
            ;
        ;
        buffer[count] <- 0
        count <- 0
        character <- 0
        @io.printChar('\n', @io.ATTRIB_GRAY)

        if isEqual(buffer, "reboot")
            @io.printTextLine("Rebooting...", @io.ATTRIB_GRAY)
            rebootRaw()
        else if isEqual(buffer, "pf")
            p ptr<u8> <- { 0x80_00_00 }
            p.val <- 42
        else if isEqual(buffer, "div")
            num1 u32 <- 5
            num2 u32 <- 0
            res u32 <- num1 / num2
        else if isEqual(buffer, "mem")
            printMemStatsRaw()
        else if isEqual(buffer, "ls")
            listRootRaw()
        else
            @io.printTextLine("Dunno", @io.ATTRIB_GRAY)
        ;
    ;
;
