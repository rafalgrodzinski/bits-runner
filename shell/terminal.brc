@module terminal

printCharRaw raw<"m, m">: character u32, attribute u32
    mov ah, 0x00
    mov bl, $0
    mov al, $1
    int 0x30
;

printHexRaw raw<"m, m">: number u32, attribute u32
    mov ah, 0x02
    mov ebx, $0
    mov al, $1
    int 0x30
;

readPressedAsciiRaw raw<"=r"> -> u32
    mov ah, 0x07
    int 0x30
    mov $0, ebx
;

@export printChar fun: character u32, attribute u32
    printCharRaw(character, attribute)
;

@export printHex fun: number u32, attribute u32
    printHexRaw(number, attribute)
;

@export readPressedAscii fun -> u32
    ret readPressedAsciiRaw()
;

@export readLine fun -> data<u32, 16>
    buffer data<u32, 16>
    count u32 <- 0
    character u32 <- 0

    rep character != '\n':
        character <- readPressedAscii()
        /*if character = '\b' and count > 0:
            count <- count - 1
            printChar(character, 0x07)
        ;*/
        if character != '\n' and character != '\b' and character != 0 and count < 15:
            buffer[count] <- character
            count <- count + 1
            printChar(character, 0x07)
        ;
        /*if character != 0:
            printChar(character, 0x07)
        ;*/
    ;
    printChar('\n', 0x07)
    buffer[count] <- 0

    ret buffer
;

@export print fun: text data<u32, 16>, attribute u32
    i u32 <- 0
    rep i < 16 and text[i] != 0:
        printChar(text[i], attribute)
    ;
;