@module fs_fat12

@import mem
@import bios_service
@import term

BYTES_PER_SECTOR u32 <- 512
RESERVED_SECTORS_COUNT u32 <- 1
FATS_COUNT u32 <- 2
SECTORS_PER_FAT u32 <- 9
ROOT_DIR_ENTRIES_COUNT u32 <- 512
BYTES_PER_ENTRY u32 <- 32

ATTRIB_HIDDEN u32 <- 0x02
ATTRIB_VOLUME_ID u32 <- 0x08
ATTRIB_LONG_FILE_NAME u32 <- 0x0f
ATTRIB_DIR u32 <- 0x10

OFFSET_SIZE u32 <- 28
OFFSET_CLUSTER u32 <- 26

FILE_ENTRY_KIND_FILE u32 <- 1
FILE_ENTRY_KIND_DIR u32 <- 2

pFatEntry ptr<data<u8>>

FileEntry blob
    fileName data<u8, 64>
    kind u32
    fileSize u32
    cluster u32
    subDirEntry ptr<blob<FileEntry>>
    nextFileEntry ptr<blob<FileEntry>>
;

rootDirEntry blob<FileEntry>
volumeName data<u8, 64>

@export init fun
    pFatEntry <- @mem.allocateBytes(SECTORS_PER_FAT * BYTES_PER_SECTOR)
    @bios_service.readSectors(
        0,
        RESERVED_SECTORS_COUNT,
        SECTORS_PER_FAT,
        pFatEntry
    )
    initRootDir()

    rep pFileEntry ptr<blob<FileEntry>> <- { rootDirEntry.adr }, pFileEntry.vAdr != 0, pFileEntry <- pFileEntry.val.nextFileEntry
        @term.printString(pFileEntry.val.fileName, @term.FOREGROUND_GRAY)
        @term.printString(", ", @term.FOREGROUND_GRAY)

        if pFileEntry.val.kind = FILE_ENTRY_KIND_DIR
            @term.printString("dir, ", @term.FOREGROUND_GRAY)
        else
            @term.printString("file, ", @term.FOREGROUND_GRAY)
        ;
    
        @term.printNumber(pFileEntry.val.fileSize, @term.FOREGROUND_GRAY)
        @term.printString(" bytes, cluster ", @term.FOREGROUND_GRAY)

        @term.printNumber(pFileEntry.val.cluster, @term.FOREGROUND_GRAY)
        @term.printString("\n", @term.FOREGROUND_GRAY)
    ;
;

initRootDir fun
    rootDirEntry <- { "/", 0, 0, FILE_ENTRY_KIND_DIR, { 0x00 }, { 0x00 } }

    pRootDir ptr<data<u8>> <- @mem.allocateBytes(ROOT_DIR_ENTRIES_COUNT * BYTES_PER_ENTRY)
    @bios_service.readSectors(
        0,
        RESERVED_SECTORS_COUNT + SECTORS_PER_FAT * FATS_COUNT,
        ROOT_DIR_ENTRIES_COUNT * BYTES_PER_ENTRY / BYTES_PER_SECTOR,
        pRootDir
    )

    pFile ptr<data<u8>> <- pRootDir
    pCurrentFileEntry ptr<blob<FileEntry>> <- rootDirEntry.adr
    rep i u32 <- 0, i < ROOT_DIR_ENTRIES_COUNT and pFile.val[0] != 0x00.u8, i <- i + 1
        attribute u32 <- pFile.val[11].u32

        isHidden bool <- attribute & 0x0f = ATTRIB_HIDDEN
        isVolumeId bool <- attribute & 0x0f = ATTRIB_VOLUME_ID
        isLongFileName bool <- attribute & 0x0f = ATTRIB_LONG_FILE_NAME
        isDirectory bool <- attribute & 0xf0 = ATTRIB_DIR

        // Get name of the volume
        if isVolumeId
            if pFile.val[0] = 0xe5.u8
                volumeName <- ""
            else
                lastIndex u32 <- 10
                rep lastIndex > 0 and pFile.val[lastIndex] = ' '.u8: lastIndex <- lastIndex - 1
                rep nameIndex u32 <- 0, nameIndex <= lastIndex, nameIndex <- nameIndex + 1
                    volumeName[nameIndex] <- pFile.val[nameIndex]
                ;
                volumeName[lastIndex+1] <- 0
            ;
        ;

        // file or directory
        if not isLongFileName and not isVolumeId and pFile.val[0] != 0xe5.u8
            pFileEntry ptr<blob<FileEntry>> <- @mem.allocateBytes(64 + 4 * 5)
            pFileEntry.val.subDirEntry <- { 0x00 }
            pFileEntry.val.nextFileEntry <- { 0x00 }

            // copy name
            targetIndex u32 <- 0
            sourceIndex u32 <- 0
            // file name
            rep sourceIndex < 8, sourceIndex <- sourceIndex + 1
                if pFile.val[sourceIndex] != ' '.u8
                    pFileEntry.val.fileName[targetIndex] <- pFile.val[sourceIndex]
                    targetIndex <- targetIndex + 1
                ;
            ;
            // dot
            if not isDirectory
                pFileEntry.val.fileName[targetIndex] <- '.'.u8
                targetIndex <- targetIndex + 1
            ;
            // extension
            rep sourceIndex < 11, sourceIndex <- sourceIndex + 1
                if pFile.val[sourceIndex] != ' '.u8
                    pFileEntry.val.fileName[targetIndex] <- pFile.val[sourceIndex]
                    targetIndex <- targetIndex + 1
                ;
            ;
            pFileEntry.val.fileName[targetIndex] <- 0

            // kind
            pFileEntry.val.kind <- if isDirectory: FILE_ENTRY_KIND_DIR else: FILE_ENTRY_KIND_FILE

            // size
            pFileEntry.val.fileSize <- pFile.val[OFFSET_SIZE].u32
            pFileEntry.val.fileSize <- pFileEntry.val.fileSize + (pFile.val[OFFSET_SIZE + 1].u32 << 8)
            pFileEntry.val.fileSize <- pFileEntry.val.fileSize + (pFile.val[OFFSET_SIZE + 2].u32 << 16)
            pFileEntry.val.fileSize <- pFileEntry.val.fileSize + (pFile.val[OFFSET_SIZE + 3].u32 << 24)

            // cluster
            pFileEntry.val.cluster <- pFile.val[OFFSET_CLUSTER].u32
            pFileEntry.val.cluster <- pFileEntry.val.cluster + (pFile.val[OFFSET_CLUSTER + 1].u32 << 8)

            pCurrentFileEntry.val.nextFileEntry <- pFileEntry
            pCurrentFileEntry <- pFileEntry
        ;

        pFile <- { pFile.vAdr + BYTES_PER_ENTRY }
    ;
;
