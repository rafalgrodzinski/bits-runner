@module int_handler

@import term
@import drv_keyboard
@import syscall

INT_PAGE_FAULT u32 <- 0x0e
INT_IRQ0 u32 <- 0x20 // timer
INT_IRQ1 u32 <- 0x21 // keyboard
INT_SYSCALL u32 <- 0x30

halt raw<"">
halt${:uid}:
    hlt
    jmp halt${:uid}
;

copyCr2 raw<"=r"> -> u32
    mov $0, cr2
;

@export handleInterrupt fun: eax u32, ebx u32, interrupt u32, errorCode u32 -> u32
    if interrupt = INT_PAGE_FAULT
        @term.printString("Page fault accessing memory at: ", @term.FOREGROUND_RED + @term.ATTRIB_BLINKING)
        @term.printHex(copyCr2(), @term.FOREGROUND_RED + @term.ATTRIB_BLINKING)
        @term.printNewLine()
        halt()
    else if interrupt = INT_IRQ0
    else if interrupt = INT_IRQ1
        @drv_keyboard.handleInterrupt()
    else if interrupt = INT_SYSCALL
        ret @syscall.handleInterrupt(eax, ebx)
    else
        @term.printString("Unhandled interrupt: ", @term.FOREGROUND_RED + @term.ATTRIB_BLINKING)
        @term.printHex(interrupt, @term.FOREGROUND_RED + @term.ATTRIB_BLINKING)
        @term.printString(", error code: ", @term.FOREGROUND_RED + @term.ATTRIB_BLINKING)
        @term.printHex(errorCode, @term.FOREGROUND_RED + @term.ATTRIB_BLINKING)
        @term.printNewLine()
        halt()
    ;

    ret eax
;